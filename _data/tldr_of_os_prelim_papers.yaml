- topic: Concurrency, Scheduling, and Synchronization
  papers:
    - title: Experience with Processes and Monitors in Mesa
      tldr: Demonstrates that monitors integrated in the Mesa programming language have low overhead and can be used to build complex concurrent applications.
      authors: B.W. Lampson, D.D. Redell
      venue: Communications of the ACM
      year: 1980
      tags: Xerox PARC
    - title: Threads and Input/Output in the Synthesis Kernel
      tldr: |
        Introduces executable data structures (quajects: I/O servers or threads, connectors: queues, pumps, monitors, procedure calls)
        to reduce the cost of synchronization in the kernel.
        Also discusses other optimizations such collapsing layers, procedure chaining, code isolation, and
        optimistic synchronization (assume no conflict; if one arises, roll back and retry).
      authors: H. Massalin, C. Pu
      venue: Proceedings of the 12th ACM Symposium on Operating Systems Principles
      year: 1989
    - title: Metascheduling for Continuous Media
      tldr: |
        Proposes a scheduling framework for continuous media (e.g. audio, video streams) which can guarantee performance across multiple stages.
        The paper approaches scheduling from a theoretical perspective and focuses mostly on guaranteeing latency, throughput, and bounding jitter.
      authors: D.P. Anderson
      venue: ACM Transactions on Computer Systems
      year: 1993
    - title: "Lottery Scheduling: Flexible Proportional Share Resource Management"
      tldr: |
        Entities competing for resources are assigned tickets based on their priority.
        The higher the priority, the more tickets the task receives relative to the other competitors,
        ensuring that the taskâ€™s chance of acquiring the resource increases.
        Works best with preemptible or shortly-held resources; not real time due to probabilistic guarantees.
      authors: C. Waldspurger, W. Weihl
      venue: Proceedings of the First Symposium on Operating Systems Design and Implementation
      year: 1994
- topic: "Communications: Local and Remote"
  papers:
    - title: Implementing Remote Procedure Calls
      tldr: Basic RPC abstraction with client stub to kernel to network via protocol to kernel to server stub.
      authors: A.D. Birrell, B.J. Nelson
      venue: ACM Transactions on Computer Systems
      year: 1984
    - title: "RPC in the x-Kernel: Evaluating New Design Techniques"
      tldr: |
        Introduced virtual protocols, enabling the use of a different protocol without changing application logic (same interface, different implementation).
        Also introduced layered protocols, enabling the building of complex protocols out of simple, optimized building blocks.
      authors: L. Peterson, N. Hutchinson, S. O'Malley, M. Abbott
      venue: Proceedings of the 12th ACM Symposium on Operating Systems Principles
      year: 1989
    - title: Lightweight Remote Procedure Call
      tldr: Most RPCs are local and simple, therefore use shared memory (A-stacks) for local RPCs to reduce copies and context switches.
      authors: B.N. Bershad, T.E. Anderson, E.D. Lazowska, H.M. Levy
      venue: ACM Transactions on Computer Systems
      year: 1990
    - title: "Active Messages: A Mechanism for Integrated Communication and Computation"
      tldr: Use asynchronous communication. Messages specify a predefined handler which is invoked upon receipt.
      authors: T. von Eicken, D.E. Culler, S.C. Goldstein, K.E. Schauser
      venue: Proceedings of the Nineteenth Annual International Symposium on Computer Architecture
      year: 1992
    - title: Efficient Software-Based Fault Isolation
      tldr: Use segment matching and sandboxing to run untrusted code in the same address space as trusted code to reduce the cost of context switches (fault domains).
      author: R. Wahbe, S. Lucco, T.E. Anderson, and S.L. Graham
      venue: Proceedings of the 14th ACM Symposium on Operating Systems Principles
      year: 1993
    - title: Protocol Service Decomposition for High-Performance Networking
      tldr: Kernel allocates network sessions to applications which allow hardware access to the networking device.
      authors: C. Maeda, Brian N. Bershad
      venue: Proceedings of the 14th ACM Symposium on Operating Systems Principles
      year: 1993
- topic: File Systems
  papers:
    - title: Design and Implementation of the Sun Network Filesystem
      tldr: |
        NFS is implemented via RPC with stateless servers, enabling clients to implement fault tolerance by retrying requests.
        It contributes the Virtual File System interface which specifies operations that can be done on a file system,
        and the vnode interface to specify operations on files within that filesystem.
      authors: R. Sandberg, D. Goldberg, S. Kleiman, D. Walsh, B. Lyon
      venue: USENIX Summer Conference Proceedings
      year: 1985
    - title: Scale and Performance in a Distributed File System
      tldr: |
        Introduces the Andrew File System which uses caching in stateful clients and replication of volumes in stateful servers
        to improve on NFS by offering better scalability.
        Tries to make reads cheap as they occur much more frequently than writes.
        Achieves consistency via cache invalidation upon writes after a file is closed.
      authors: J. Howard, M. Kazar, S. Menees, D. Nichols, M. Satyanarayanan, R. Sidebotham, M. West
      venue: ACM Transactions on Computer Systems
      year: 1988
    - title: Caching in the Sprite Network File System
      tldr: |
        Sprite guarantees the consistency of a file even when there are multiple readers and writers.
        Sprite achieves this using cache management policies (e.g. disabling the cache in the presence of a writer),
        and dynamically resizes the main memory cache depending on the load.
      authors: M.N. Nelson, B.B. Welch, and J.K. Ousterhout
      venue: ACM Transactions on Computer Systems
      year: 1988
    - title: Measurements of a Distributed File System
      tldr: |
        Networked file systems behave similar to local file systems.
        Most traffic is sequential transfer of blocks. Files are small.
        Write sharing happens rarely, so prefer simple consistency algorithms over efficient ones.
      authors: M.G. Baker, J.H. Hartman, M.D. Kupfer, K.W. Shirriff, J.K. Ousterhout
      venue: Proceedings of the 13th ACM Symposium on Operating Systems Principles
      year: 1991
    - title: The Design and Implementation of a Log-Structured File System
      tldr: |
        Divide the disk into segments.
        Write the log one segment at a time. LFS achieves 10x better performance on random writes, partially because writes are batched.
        Reclaim segments during defragmentation; the proposed policy takes into account utilization and age of a segment.
        Recover using checkpoints (better guarantees) and reconstruction (less overhead) by scanning log segments after a checkpoint.
      authors: M. Rosenblum, J.K. Ousterhout
      venue: ACM Transactions on Computer Systems
      year: 1992
    - title: Disconnected Operation in the Coda File System
      tldr: |
        Maximizes availability on a networked file system by maintaining a cache of entire files locally.
        Replays changes to reintegrate files that were modified offline.
        Can detect write conflicts which must be resolved by the user.
      authors: J.J. Kistler, M. Satyanarayanan
      venue: ACM Transactions on Computer Systems
      year: 1992
    - title: The Zebra Striped Network File System
      tldr: |
        Combines ideas of LFS and RAID to produce a fault tolerance file system with greater throughput at the cost of storage overhead.
        The log is weaved between stripes.
        A stripe consists of an array of bits + parity, and is split across servers.
      authors: John H. Hartman, John K. Ousterhout
      venue: Proceedings of the 14th ACM Symposium on Operating Systems Principles
      year: 1993
    - title: Extensible File System in Spring
      tldr: |
        Extend file system functionality by defining a new file system stacked on top of an existing file system via the proposed interface
        (e.g. a distributed or compressed built on top of a standard local file system).
      authors: Y.A. Khalidi, and M.N. Nelson
      venue: Proceedings of the 14th ACM Symposium on Operating Systems Principles
      year: 1993
    - title: "Cooperative Caching: Using Remote Client Memory to Improve File System Performance"
      tldr: |
        Cooperative caching improves read performance.
        Of the evaluated algorithms, N-Chance Forwarding performs best (performance and fairness).
        N-Chance Forwarding dynamically splits caches between locally managed and cooperatively managed according to load.
        A cooperatively managed object is forwarded to another cooperatively managed cache upon eviction;
        this happens N times without being accessed before the object is evicted from the cooperatively managed cache.
      authors: M. Dahlin, T. Anderson, D. Patterson, R. Wang
      venue: Proceedings of the First Symposium on Operating Systems Design and Implementation
      year: 1994
- topic: OS Structure
  papers:
    - title: The Structuring of Systems Using Upcalls
      tldr: Allow lower layers to invoke upper layers via upcalls in order to reduce the overhead of context switches and IPC.
      authors: D.D. Clark
      venue: Proceedings of the 10th ACM Symposium on Operating Systems Principles
      year: 1985
    - title: Why Aren't Operating Systems Getting Faster as Fast as Hardware?
      tldr: OS design should account for memory and I/O as bottlenecks rather than CPU speed.
      authors: J.K. Ousterhout
      venue: USENIX Summer Conference Proceedings
      year: 1990
    - title: The Interaction of Architecture and Operating System Design
      tldr: |
        Must codesign OS and architecture to improve performance on key components such as IPC, virtual memory, and thread management.
        New architectures, bigger registers, faster flops. Doesn't really help computing parts of IPC/RPC.
        Hardware should support OS move towards microkernels.
      authors: Thomas Anderson, Henry Levy, Brian Bershad, Edward Lazowska
      venue: Proceedings of the Fourth International Conference on Architectural Support for Programming Languages and Operating Systems
      year: 1991
      tags: Mach
    - title: The Impact of Operating System Structure on Memory System Performance
      tldr: |
        Experimentally evaluates several assertions about impact of OS structure on performance relating to memory.
        Advocates for using mean cycles per instruction as a metric because it captures impact on overall performance.
        Microkernels have worse performance than monolithic kernels.
      authors: J. Bradley Chen, Brian N. Bershad
      venue: Proceedings of the 14th ACM Symposium on Operating Systems Principles
      year: 1993
      tags: Mach
